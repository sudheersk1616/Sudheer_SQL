CREATE DATABASE GROCERYSTORE;
USE GROCERYSTORE;

-- 1. Supplier Table 
CREATE TABLE IF NOT EXISTS supplier ( 
    sup_id TINYINT PRIMARY KEY, 
    sup_name VARCHAR(255), 
    address TEXT 
); 
SELECT * FROM SUPPLIER;
-- 2. Categories Table 
CREATE TABLE IF NOT EXISTS categories ( 
    cat_id TINYINT PRIMARY KEY, 
    cat_name VARCHAR(255) 
);
SELECT * FROM CATEGORIES;
-- 3. Employees Table 
CREATE TABLE IF NOT EXISTS employees ( 
    emp_id TINYINT PRIMARY KEY, 
    emp_name VARCHAR(255), 
    hire_date VARCHAR(255) 
);
SELECT * FROM EMPLOYEES;
-- 4. Customers Table 
CREATE TABLE IF NOT EXISTS customers ( 
    cust_id SMALLINT PRIMARY KEY, 
    cust_name VARCHAR(255), 
    address TEXT 
);
SELECT * FROM CUSTOMERS;
-- 5. Products Table 
CREATE TABLE IF NOT EXISTS products ( 
    prod_id TINYINT PRIMARY KEY, 
    prod_name VARCHAR(255), 
    sup_id TINYINT, 
    cat_id TINYINT, 
    price DECIMAL(10,2), 
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id) 
        ON UPDATE CASCADE ON DELETE CASCADE, 
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id) 
        ON UPDATE CASCADE ON DELETE CASCADE 
);
SELECT * FROM PRODUCTS;
-- 6. Orders Table 
CREATE TABLE IF NOT EXISTS orders ( 
    ord_id SMALLINT PRIMARY KEY, 
    cust_id SMALLINT, 
    emp_id TINYINT, 
    order_date date, 
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id) 
        ON UPDATE CASCADE ON DELETE CASCADE, 
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id) 
        ON UPDATE CASCADE ON DELETE CASCADE 
);
SELECT * FROM ORDERS;
-- 7. Order_Details Table 
CREATE TABLE IF NOT EXISTS order_details ( 
ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY, 
ord_id SMALLINT, 
prod_id TINYINT, 
quantity TINYINT, 
each_price DECIMAL(10,2), 
total_price DECIMAL(10,2), 
FOREIGN KEY (ord_id) REFERENCES orders(ord_id) 
ON UPDATE CASCADE ON DELETE CASCADE, 
FOREIGN KEY (prod_id) REFERENCES products(prod_id) 
ON UPDATE CASCADE ON DELETE CASCADE 
); 
SELECT * FROM ORDER_DETAILS;

-- 1. Customer Insights 
-- How many unique customers have placed orders? 
SELECT DISTINCT CUST_ID FROM ORDERS;

-- Which customers have placed the highest number of orders? 
SELECT COUNT(ORD_ID) AS CNT, CUST_ID FROM ORDERS
GROUP BY CUST_ID
ORDER BY CNT DESC
LIMIT 1;

-- What is the total and average purchase value per customer? 
SELECT O.CUST_ID,SUM(OD.TOTAL_PRICE) AS TP, AVG(OD.TOTAL_PRICE) AS AVGP FROM ORDER_DETAILS OD
INNER JOIN ORDERS O ON 
OD.ORD_ID = O.ORD_ID
GROUP BY O.CUST_ID
ORDER BY CUST_ID;

-- Who are the top 5 customers by total purchase amount? 
SELECT O.CUST_ID,SUM(OD.TOTAL_PRICE) AS TP FROM ORDER_DETAILS OD
INNER JOIN ORDERS O ON 
OD.ORD_ID = O.ORD_ID
GROUP BY O.CUST_ID
ORDER BY TP DESC
LIMIT 5;

-- 2. Product Performance
-- How many products exist in each category? 
SELECT COUNT(PROD_ID), CAT_ID FROM PRODUCTS GROUP BY CAT_ID;

-- What is the average price of products by category? 
SELECT COUNT(PROD_ID), CAT_ID, AVG(PRICE) FROM PRODUCTS GROUP BY CAT_ID;

-- Which products have the highest total sales volume (by quantity)? 
SELECT P.PROD_ID,P.PROD_NAME, SUM(OD.QUANTITY) AS SALES_VOL_QUNATITY FROM PRODUCTS P
INNER JOIN ORDER_DETAILS OD ON
P.PROD_ID = OD.PROD_ID
GROUP BY PROD_ID
ORDER BY SALES_VOL_QUNATITY DESC
LIMIT 1;

-- What is the total revenue generated by each product? 
SELECT P.PROD_ID,P.PROD_NAME, SUM(PRICE) AS TOTAL_REVENUE FROM PRODUCTS P
INNER JOIN ORDER_DETAILS OD ON
P.PROD_ID = OD.PROD_ID
GROUP BY PROD_ID
ORDER BY TOTAL_REVENUE;

-- How do product sales vary by category and supplier? 
SELECT 
    c.cat_name,
    s.sup_name,
    SUM(od.total_price) AS TotalSales
FROM 
    order_details od
JOIN 
    products p ON od.prod_id = p.prod_id
JOIN 
    categories c ON p.cat_id = c.cat_id
JOIN 
    supplier s ON p.sup_id = s.sup_id
GROUP BY 
    c.cat_name, s.sup_name
ORDER BY 
    TotalSales DESC;
    
-- 3. Sales and Order Trends 
-- How many orders have been placed in total? 
select count(ord_id) from order_details;

-- What is the average value per order? 
SELECT 
    AVG(OrderTotal) AS AverageOrderValue
FROM (
    SELECT 
        od.ord_id,
        SUM(od.total_price) AS OrderTotal
    FROM 
        order_details od
    GROUP BY 
        od.ord_id
) AS OrderSums;

-- On which dates were the most orders placed? 
select * from orders;
select order_date, count(ord_id) as cnt from orders
group by order_date
order by cnt desc;

-- What are the monthly trends in order volume and revenue? 
SELECT 
    DATE_FORMAT(o.order_date, '%m-%d-%Y') AS Month,
    COUNT(DISTINCT o.ord_id) AS OrderVolume,
    SUM(od.total_price) AS Revenue
FROM 
    Orders o
JOIN 
    order_details od ON o.ord_id = od.ord_id
GROUP BY 
    DATE_FORMAT(o.order_date, '%m-%d-%Y')
ORDER BY 
    Month;
select * from orders;
SELECT 
    FORMAT(CONVERT(date, ord_date, 101), 'yyyy-MM') AS Month,
    COUNT(OrderID) AS OrderVolume
FROM 
    Orders
GROUP BY 
    FORMAT(CONVERT(date, OrderDate, 101), 'yyyy-MM')
ORDER BY 
    Month;

-- How do order patterns vary across weekdays and weekends?